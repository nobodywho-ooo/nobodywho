# Unity Development Tasks
set shell := ["bash", "-c"]
set dotenv-load := true


_parse_test_results:
    #!/usr/bin/env bash
    if [ ! -f "test-results.xml" ]; then
        echo "‚ùå No test results found!"
        exit 1
    fi
    
    # Parse the XML file using xmllint with default values if not found
    TOTAL=$(xmllint --xpath "string(/test-run/@total)" test-results.xml 2>/dev/null || echo "0")
    PASSED=$(xmllint --xpath "string(/test-run/@passed)" test-results.xml 2>/dev/null || echo "0")
    FAILED=$(xmllint --xpath "string(/test-run/@failed)" test-results.xml 2>/dev/null || echo "0")
    SKIPPED=$(xmllint --xpath "string(/test-run/@skipped)" test-results.xml 2>/dev/null || echo "0")
    DURATION=$(xmllint --xpath "string(/test-run/@duration)" test-results.xml 2>/dev/null || echo "0")
    
    # Convert empty strings to 0
    TOTAL=${TOTAL:-0}
    PASSED=${PASSED:-0}
    FAILED=${FAILED:-0}
    SKIPPED=${SKIPPED:-0}
    DURATION=${DURATION:-0}
    
    # Output in a format that can be captured
    echo "$TOTAL:$PASSED:$FAILED:$SKIPPED:$DURATION"


_ensure-license:
    #!/usr/bin/env bash
    LICENSE_PATH=~/.local/share/unity3d/Unity/Unity_lic.ulf
    
    if [ ! -f "$LICENSE_PATH" ]; then
        echo "üîë No Unity license found at $LICENSE_PATH"
        echo ""
        echo "Please follow these steps:"
        echo "1. Run: unityhub"
        echo "2. Log in with your Unity account"
        echo "3. Go to Preferences > Licenses"
        echo "4. Click Add > Get a free personal license"
        echo ""
        echo "The license file will be created automatically at:"
        echo "$LICENSE_PATH"
        echo ""
        echo "Then run 'just' again to launch Unity"
        exit 1
    fi


default:
    @just --list

# Launch Unity
unity *args: _ensure-license
    unity-editor \
        -username "$UNITY_USERNAME" \
        -password "$UNITY_PASSWORD" \
        -projectPath "$(pwd)/UnityProject" \
        {{args}}

# Run Unity tests and display results
test: _ensure-license
    #!/usr/bin/env bash
    echo "üß™ Running Unity package tests..."
    
    # Create a temporary directory in the user's home directory
    TEMP_DIR="$(pwd)/unity-test-$(date +%s)"
    mkdir -p "$TEMP_DIR"
    echo "üìÅ Created temporary project at: $TEMP_DIR"
    
    # Check if the core DLL exists
    if [ ! -f "./src/Runtime/Plugins/x86_64/libnobodywho.so" ]; then
        echo "‚ùå Core DLL not found at ./src/Runtime/Plugins/x86_64/libnobodywho.so"
        echo "Checking if it exists in other locations..."
        find .. -name "libnobodywho.so" 2>/dev/null
        echo "Please build the core library first with 'cd ../core && cargo build'"
        exit 1
    fi    
    # Initialize a basic Unity project for testing
    unity-editor \
        -batchmode \
        -createProject "$TEMP_DIR" \
        -addPackage "com.unity.test-framework@1.4.5" \
        -quit

    # Copy package to test project
    mkdir -p "$TEMP_DIR/Packages/com.test.package"
    cp -r src/* "$TEMP_DIR/Packages/com.test.package/"
    
    echo "üöÄ Running Unity tests..."
    # Run the tests using Unity's test framework
    unity-editor \
        -username "$UNITY_USERNAME" \
        -password "$UNITY_PASSWORD" \
        -projectPath "$TEMP_DIR" \
        -batchmode \
        -runTests \
        -testResults "$(pwd)/test-results.xml" \
        -testPlatform PlayMode \
        -logFile "$(pwd)/unity-test.log"
    
    UNITY_EXIT_CODE=$?
    echo "Unity exited with code: $UNITY_EXIT_CODE"
    
    # Check if Unity log exists and show the last part
    if [ -f "unity-test.log" ]; then
        echo "üìú Last 50 lines of Unity log:"
        tail -n 50 unity-test.log
    fi
    
    # Get test results if they exist
    if [ -f "$(pwd)/test-results.xml" ]; then
        RESULTS=$(just _parse_test_results)
        IFS=':' read -r TOTAL PASSED FAILED SKIPPED DURATION <<< "$RESULTS"
        
        echo ""
        echo "üìä Test Results Summary:"
        echo "===================="
        
        # Display summary
        echo "‚ú® Total Tests: $TOTAL"
        echo "‚úÖ Passed: $PASSED"
        echo "‚ùå Failed: $FAILED"
        echo "‚è≠Ô∏è  Skipped: $SKIPPED"
        echo "‚è±Ô∏è  Duration: $DURATION seconds"
        echo ""
        
        # If there are failures, show them
        if [ "$FAILED" -gt 0 ]; then
            echo "Failed Tests:"
            echo "============"
            echo ""
            
            # Get all failed test names
            FAILED_TESTS=$(xmllint --xpath "//test-case[@result='Failed']/@name" test-results.xml 2>/dev/null | tr ' ' '\n' | sed 's/name="\(.*\)"/\1/')
            
            # For each failed test, get its message
            echo "$FAILED_TESTS" | while IFS= read -r test_name; do
                if [ ! -z "$test_name" ]; then
                    # Get the failure message for this test
                    message=$(xmllint --xpath "string(//test-case[@name='$test_name']//failure/message)" test-results.xml 2>/dev/null | sed 's/\[\[CDATA\[\(.*\)\]\]\>/\1/')
                    
                    echo "‚ùå $test_name"
                    echo "-------------------"
                    echo "$message"
                    echo ""
                fi
            done
        fi
    else
        echo "‚ùå No test results XML file was generated"
        echo "Checking for any error logs in the temporary project directory..."
        find "$TEMP_DIR" -name "*.log" -exec echo "Found log: {}" \; -exec tail -n 20 {} \;
    fi
    
    # Clean up the temporary directory
    rm -rf "$TEMP_DIR"
    rm -rf "$(pwd)/unity-test.log"
    echo "üßπ Cleaned up temporary project"
    
    # Exit with failure if any tests failed or if no results were found
    if [ ! -f "test-results.xml" ]; then
        exit 1
    elif [ "$FAILED" -gt 0 ]; then
        rm -rf "$(pwd)/test-results.xml"
        exit 1
    else
        rm -rf "$(pwd)/test-results.xml"
        exit 0
    fi
