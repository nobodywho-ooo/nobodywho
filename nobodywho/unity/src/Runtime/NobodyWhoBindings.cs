// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using NobodyWho;
#pragma warning restore 0105

namespace NobodyWho
{
    public static partial class NobodyWhoBindings
    {
        public const string NativeLib = "libnobodywho_unity";

        static NobodyWhoBindings()
        {
        }


        /// Initialize tracing for tests
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "init_tracing")]
        public static extern void init_tracing();

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_destroy")]
        public static extern ModelError modelwrapper_destroy(ref IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_new")]
        public static extern ModelError modelwrapper_new(ref IntPtr context, string model_path, bool use_gpu);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_get_use_gpu_if_available")]
        public static extern bool modelwrapper_get_use_gpu_if_available(IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_set_use_gpu_if_available")]
        public static extern ModelError modelwrapper_set_use_gpu_if_available(IntPtr context, bool value);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_get_model_path")]
        public static extern IntPtr modelwrapper_get_model_path(IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "modelwrapper_set_model_path")]
        public static extern ModelError modelwrapper_set_model_path(IntPtr context, string model_path_ptr);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_destroy")]
        public static extern ChatError chatwrapper_destroy(ref IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_new")]
        public static extern ChatError chatwrapper_new(ref IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_start_worker")]
        public static extern ChatError chatwrapper_start_worker(IntPtr context, IntPtr modelwrapper, uint n_ctx, string system_prompt);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_reset_context")]
        public static extern ChatError chatwrapper_reset_context(IntPtr context, string system_prompt);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_say")]
        public static extern ChatError chatwrapper_say(IntPtr context, string text, bool use_grammar, string grammar, string stop_words);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "chatwrapper_poll_response")]
        public static extern PollResult chatwrapper_poll_response(IntPtr context);

    }

    public enum PollKind
    {
        Nothing = 0,
        Token = 1,
        Done = 2,
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PollResult
    {
        public PollKind kind;
        public IntPtr ptr;
        public uint len;
    }

    /// CHAT WORKER
    public enum ChatError
    {
        Ok = 0,
        Null = 1,
        Panic = 2,
        GenerationInProgress = 3,
        BadSystemPrompt = 4,
        BadSayText = 5,
        LoadModelFailed = 6,
        WorkerNotStarted = 7,
    }

    /// ERRORS
    public enum ModelError
    {
        Ok = 0,
        Null = 1,
        Panic = 2,
        BadModelPath = 3,
        LoadFailed = 5,
    }


    /// MODEL
    public partial class ModelWrapper : IDisposable
    {
        private IntPtr _context;

        private ModelWrapper() {}

        public static ModelWrapper New(string model_path, bool use_gpu)
        {
            var self = new ModelWrapper();
            var rval = NobodyWhoBindings.modelwrapper_new(ref self._context, model_path, use_gpu);
            if (rval != ModelError.Ok)
            {
                throw new InteropException<ModelError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = NobodyWhoBindings.modelwrapper_destroy(ref _context);
            if (rval != ModelError.Ok)
            {
                throw new InteropException<ModelError>(rval);
            }
        }

        public bool GetUseGpuIfAvailable()
        {
            return NobodyWhoBindings.modelwrapper_get_use_gpu_if_available(_context);
        }

        public void SetUseGpuIfAvailable(bool value)
        {
            var rval = NobodyWhoBindings.modelwrapper_set_use_gpu_if_available(_context, value);
            if (rval != ModelError.Ok)
            {
                throw new InteropException<ModelError>(rval);
            }
        }

        public IntPtr GetModelPath()
        {
            return NobodyWhoBindings.modelwrapper_get_model_path(_context);
        }

        public void SetModelPath(string model_path_ptr)
        {
            var rval = NobodyWhoBindings.modelwrapper_set_model_path(_context, model_path_ptr);
            if (rval != ModelError.Ok)
            {
                throw new InteropException<ModelError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    public partial class ChatWrapper : IDisposable
    {
        private IntPtr _context;

        private ChatWrapper() {}

        public static ChatWrapper New()
        {
            var self = new ChatWrapper();
            var rval = NobodyWhoBindings.chatwrapper_new(ref self._context);
            if (rval != ChatError.Ok)
            {
                throw new InteropException<ChatError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = NobodyWhoBindings.chatwrapper_destroy(ref _context);
            if (rval != ChatError.Ok)
            {
                throw new InteropException<ChatError>(rval);
            }
        }

        public void StartWorker(IntPtr modelwrapper, uint n_ctx, string system_prompt)
        {
            var rval = NobodyWhoBindings.chatwrapper_start_worker(_context, modelwrapper, n_ctx, system_prompt);
            if (rval != ChatError.Ok)
            {
                throw new InteropException<ChatError>(rval);
            }
        }

        public void ResetContext(string system_prompt)
        {
            var rval = NobodyWhoBindings.chatwrapper_reset_context(_context, system_prompt);
            if (rval != ChatError.Ok)
            {
                throw new InteropException<ChatError>(rval);
            }
        }

        public void Say(string text, bool use_grammar, string grammar, string stop_words)
        {
            var rval = NobodyWhoBindings.chatwrapper_say(_context, text, use_grammar, grammar, stop_words);
            if (rval != ChatError.Ok)
            {
                throw new InteropException<ChatError>(rval);
            }
        }

        public PollResult PollResponse()
        {
            return NobodyWhoBindings.chatwrapper_poll_response(_context);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
