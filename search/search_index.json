{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>NobodyWho is an open-source framework that lets you easily - and without deep technical knowhow -  run large-language-models completely free and offline.</p> <p>It has a simple but powerful interface that makes it possible for non , all powered by llama.cpp.  Because every token is generated on the user\u2019s machine, there are no cloud fees, unpredictable latency,  and GDPR headaches, while still getting GPU-accelerated throughput via Vulkan or Metal back-ends.</p>"},{"location":"#made-with-nobodywho","title":"Made with NobodyWho!","text":"<ul> <li> Neophyte<ul> <li>Describe your actions and use the items you buy with your words to finish off the enemies.</li> </ul> </li> <li> The Merchant's Road<ul> <li>An LLM-driven text adventure where you guard a merchant in his travels.</li> </ul> </li> <li> Who Farted in the Elevator?<ul> <li>LLM game where you talk to NPCs about farting in the elevator.</li> </ul> </li> <li> Procedural Gungeon<ul> <li>A procedurally generated 2D shooter that takes place in an infinite dungeon.</li> </ul> </li> <li> The Black Box<ul> <li>Half Life inspired short story with a mysterious Black Box.</li> </ul> </li> <li> Ai Argument<ul> <li>A party game where you argue a position before an AI judge.</li> </ul> </li> <li> The World Will End in 60 Seconds!<ul> <li>What will you do before it\u2019s all over?</li> </ul> </li> <li> The Asteroid<ul> <li>A game where you can chat with the crew of a spacestation to figure out what happened in the accident.</li> </ul> </li> </ul>"},{"location":"#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"#once-i-export-my-godot-project-it-can-no-longer-find-the-model-file","title":"Once I export my Godot project, it can no longer find the model file.","text":"<p>Exports are a bit weird for now: Llama.cpp expects a path to a GGUF file on your filesystem, while Godot really wants to package everything in one big .pck file.</p> <p>The solution (for now) is to manually copy your chosen GGUF file into the export directory (the folder with your exported game executable).</p> <p>We're looking into solutions for including this file automatically.</p>"},{"location":"#where-do-i-find-good-models-to-use","title":"Where do I find good models to use?","text":"<p>New language models are coming out at a breakneck pace. If you search the web for \"best language models for roleplay\" or something similar, you'll probably find results that are several months or years old. You want to use something newer.</p> <p>We recommend checking leaderboards like The GPU-Poor LLM Gladiator Arena, or OpenRouter's Roleplay Rankings. Once you select a model, remember that you need a quantization of it in the GGUF format. The huggingface user bartowski regularly uploads GGUF quantizations for a lot of new models.</p> <p>Selecting the best model for your use-case is mostly about finding the right trade-off between speed, memory usage and quality of the responses. Using bigger models will yield better responses, but raise minimum system requirements and slow down generation speed.</p>"},{"location":"#nobodywho-makes-godot-crash-on-arch-linux-manjaro","title":"NobodyWho makes Godot crash on Arch Linux / Manjaro","text":"<p>The Godot build currently in the Arch Linux repositories does not work with gdextensions at all.</p> <p>The solution for Arch users is to install Godot from elsewhere. The binary being distributed from the godotengine.org website works great. Other distribution methods like nix, flatpak, or building from source also seem to work great.</p> <p>If anyone knows how to report this issue and to whom, feel free to do so. At this point I have met many Arch Linux users who have this issue.</p>"},{"location":"#nobodywho-fails-to-load-on-nixos","title":"NobodyWho fails to load on NixOS","text":"<p>If using a Godot engine from nixpkgs, with NobodyWho binaries from the Godot Asset Library, it will most likely fail to look up dynamic dependencies (libgomp, vulkan-loader, etc).</p> <p>The reason is that the dynamic library .so files from the Godot Asset Library are compiled for generic Linux, and expect to find them in FHS directories like /lib, which on NixOS will not contain any dynamic libraries.</p> <p>There are two good solutions for this:</p> <ol> <li>The easy way: run the Godot editor using steam-run: <code>steam-run godot4 --editor</code></li> <li>The Nix way: compile NobodyWho using Nix. This repo contains a flake, so it's fairly simple to do (if you have nix with nix-command and flakes enabled): <code>nix build github:nobodywho-ooo/nobodywho</code>. Remember to move the dynamic libraries into the right directory afterwards.</li> </ol>"},{"location":"#can-i-export-to-html5-android-or-ios","title":"Can I export to HTML5, Android or iOS?","text":"<p>Currently only Linux, MacOS, and Windows are supported platforms.</p> <p>Mobile exports seem very feasible. See issues #114, #66, and #67 for progress.</p> <p>Web exports will be a bit trickier to get right. See issue #111.</p>"},{"location":"#licensing","title":"Licensing","text":"<p>There has been some confusion about the licensing terms of this plugin. To clarify:</p> <p>You are allowed to use this plugin in proprietary and commercial projects, free of charge.</p> <p>If you distribute modified versions of the code in this repo, you must open source those changes.</p> <p>Feel free to make proprietary games using NobodyWho, but don't make a proprietary fork of NobodyWho.### Can I export to HTML5, Android or iOS? Currently only Linux, macOS, and Windows are supported platforms.</p>"},{"location":"embeddings/","title":"Embeddings","text":"<p>Placeholder for explanations, API references, and examples on generating / consuming embeddings with NobodyWho. </p>"},{"location":"getting_started/","title":"Baby's First Steps","text":"<p>A minimal, end-to-end example showing how to load a model and perform a single chat interaction. </p> <p>Lets show you how to use the plugin to get a large language model to answer you.</p>"},{"location":"getting_started/#download-a-gguf-model","title":"Download a GGUF Model","text":"<p>If you're in a hurry, just download Qwen_Qwen3-4B-Q4_K_M.gguf. It's pretty good. Otherwise, check out our recommended models</p>"},{"location":"getting_started/#load-the-gguf-model","title":"Load the GGUF model","text":"Godot Unity <p>Add a <code>NobodyWhoModel</code> node to your scene tree.</p> <p>Set the model path to point to your GGUF model.</p> <p>Make sure that the model is downloaded and put inside your <code>project-root:/Assets/StreamingAssets/</code></p> <p>Create a new scene in your project and add the <code>NobodyWho &gt; Model</code> object and use the file finder to find your model. Make sure to have GPU acceleration enabled for faster responses at the cost of VRAM.</p>"},{"location":"getting_started/#create-a-new-chat","title":"Create a new Chat","text":"<p>The next step is adding a Chat to our scene. </p>  Godot Unity <p>Add a <code>NobodyWhoChat</code> node to your scene tree.</p> <p>Then add a script to the node:</p> <pre><code>extends NobodyWhoChat\n\nfunc _ready():\n    # configure the node (feel free to do this in the UI)\n    self.system_prompt = \"You are an evil wizard. Always try to curse anyone who talks to you.\"\n    self.model_node = get_node(\"../ChatModel\")\n\n    # connect signals to signal handlers\n    self.response_updated.connect(_on_response_updated)\n    self.response_finished.connect(_on_response_finished)\n\n    # start the LLM worker (this takes a second)\n    self.start_worker()\n\n    self.say(\"How are you?\")\n\nfunc _on_response_updated(token):\n    # this will print every time a new token is generated\n    print(token)\n\nfunc _on_response_finished(response):\n    # this will print when the entire response is finished\n    print(response)\n</code></pre> <p>Next steps is adding the Chat object.<code>NobodyWho &gt; Chat</code>. Make sure to select the model you just added in the model field.</p> <p>It has a lot of options - but for now we are only going to focus on the System prompt. These are the instructions that the LLM will try to follow. </p> <p></p> <p>Now we are ready top add a small script that sends and recieves text from the model. Add a new script component on you chat object:</p> <pre><code>using UnityEngine;\n\npublic class SendMessageToChat : MonoBehaviour\n{\n    public Chat chat;\n\n    void Start()\n    {\n        chat = GetComponent&lt;Chat&gt;();\n\n        // start the worker, this is not required, but recommended to do in the beggining of the program to make sure it is ready\n        // when the user prompts the chat the first time.\n        chat.StartWorker();\n\n        // add a listener to the responseFinished event, this will be called when the model has completed its answer.\n        chat.responseFinished.AddListener(OnResponseFinished);\n\n        // send a message to the model\n        chat.Say(\"Hey there kitten, nice to meet you!\");\n    }\n\n    void OnResponseFinished(string fullResponse)\n    {\n        Debug.Log(fullResponse);\n    }\n}\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>How to install NobodyWho and get started with the plugin. </p> <p>Install NobodyWho for the platform of your choice.</p>"},{"location":"install/#via-asset-library","title":"Via Asset Library:","text":"Godot Unity <ul> <li>Open Godot 4.4</li> <li>Go to the \"Asset Library\" tab in the top of the editor</li> <li>Search for \"NobodyWho\"</li> <li>Click on it</li> <li>Click \"Download\"</li> <li>Make sure \"Ignore asset root\" is checked</li> <li>Click \"Install\"</li> </ul> <p>This should install NobodyWho in <code>res://addons/nobodywho</code>, and you should now be able to see the NobodyWho nodes (e.g. <code>NobodyWhoChat</code>) in Godot.</p> <p>You may need to restart Godot.</p> <p>Nobodywho  unity has not yet come to the asset store \ud83e\udee0</p> <p>Please see the section below for how to install it untill then.</p>"},{"location":"install/#via-github","title":"Via Github","text":"Godot Unity <p>Grab a specific version from our github releases pages github releases page. (we recomend the latest).  You can install these zip files by going to the \"AssetLib\" tab in Godot and selecting \"Import\". OBS: Make sure that the ignore asset root option is set in the import dialogue.</p> <p>Grab the latest- or a specific version from the github releases page. When you download the unity package file, make sure to follow https://docs.unity3d.com/Manual/AssetPackagesImport.html to import the asset. </p> <p>Basically ensure that you import it like this: <code>Assets &gt; Import Package &gt; Custom Package</code></p> <p>To see and play around with the samples you might need to right click the plugin and then: <code>&gt; View in Package Manager &gt; Click on NobodyWho &gt; Samples &gt; Install</code>. This should set up all the dependencies correctly. From there you can also check the documentaiton.</p> <p>NobodyWho should now be avialable in your editor of choice. </p> <p>Before moving on please ensure that you have access to the correct nodes</p>"},{"location":"install/#todo-add-images-to-ensure-people-understand-where-to-look-for-the-correct-nodes","title":"TODO: add images to ensure people understand where to look for the correct nodes.","text":"<p>... Perfect you are now setup and ready to go!</p>"},{"location":"model-selection/","title":"Model Selection","text":"<p>TODO</p>"},{"location":"chat/","title":"Chat","text":"<p>Overview of chat functionality and guides. </p>"},{"location":"chat/advanced_chat/","title":"Advanced Chat","text":"<p>Dive into streaming tokens, stop-words, context management, and grammar-based prompting. </p>"},{"location":"chat/simple_chat/","title":"Simple Chat","text":"<p>Describe the quickest way to start a chat session, send a prompt, and read the response. </p>"},{"location":"contributing/","title":"Contributing","text":"<p>General contribution guidelines and overview of documentation in this section. </p>"},{"location":"contributing/dev_environment/","title":"Development Environment","text":"<p>Guidelines for setting up a local development environment (Unity, C#, native libs, etc.), running tests, and submitting pull requests. </p>"}]}